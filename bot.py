import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from deep_translator import GoogleTranslator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
LANGUAGE_EMOJIS = {
    'en': 'üá∫üá∏', 'ru': 'üá∑üá∫', 'es': 'üá™üá∏', 'fr': 'üá´üá∑', 'de': 'üá©üá™',
    'it': 'üáÆüáπ', 'pt': 'üáµüáπ', 'zh-cn': 'üá®üá≥', 'ja': 'üáØüáµ', 'ko': 'üá∞üá∑',
    'ar': 'üá∏üá¶', 'tr': 'üáπüá∑', 'hi': 'üáÆüá≥', 'uk': 'üá∫üá¶'
}

SUPPORTED_LANGUAGES = {
    'en': 'english',
    'ru': 'russian', 
    'es': 'spanish',
    'fr': 'french',
    'de': 'german',
    'it': 'italian',
    'pt': 'portuguese',
    'zh-cn': 'chinese (simplified)',
    'ja': 'japanese',
    'ko': 'korean',
    'ar': 'arabic',
    'tr': 'turkish',
    'hi': 'hindi',
    'uk': 'ukrainian'
}

DEFAULT_TARGET_LANGUAGES = ['en', 'ru', 'es', 'fr', 'de']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
ü§ñ **–ë–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞**

**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤!**

**–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ:**
- `—Ç–µ–∫—Å—Ç /—è–∑—ã–∫` - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫
- `/setlang en ru es` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
- `/lang` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤

**–ü—Ä–∏–º–µ—Ä:**
`–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º /en` ‚Üí –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def set_languages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫–∏: `/setlang en ru es`", parse_mode='Markdown')
        return
    
    valid_langs = [lang for lang in context.args if lang in SUPPORTED_LANGUAGES]
    
    if not valid_langs:
        await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —è–∑—ã–∫–æ–≤")
        return
    
    chat_id = update.message.chat_id
    if 'chat_settings' not in context.bot_data:
        context.bot_data['chat_settings'] = {}
    
    context.bot_data['chat_settings'][chat_id] = {'target_languages': valid_langs}
    
    response = f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —è–∑—ã–∫–∏:\n"
    for lang in valid_langs:
        emoji = LANGUAGE_EMOJIS.get(lang, 'üåê')
        response += f"{emoji} {SUPPORTED_LANGUAGES[lang]}\n"
    
    await update.message.reply_text(response)

async def show_languages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤"""
    languages_text = "üåç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**\n\n"
    for code, name in SUPPORTED_LANGUAGES.items():
        emoji = LANGUAGE_EMOJIS.get(code, 'üåê')
        languages_text += f"{emoji} `{code}` - {name}\n"
    
    await update.message.reply_text(languages_text, parse_mode='Markdown')

def detect_language(text):
     """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        text_lower = text.lower()
        
        # –†—É—Å—Å–∫–∏–π - –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
        if any('\u0400' <= char <= '\u04FF' for char in text):
            return 'ru'
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –ª–∞—Ç–∏–Ω–∏—Ü–∞
        elif any('\u0041' <= char <= '\u007A' for char in text):
            return 'en'
        # –ò—Å–ø–∞–Ω—Å–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∏ —Ç.–¥. - —Ç–æ–∂–µ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        elif '√±' in text_lower or '¬°' in text or '¬ø' in text:
            return 'es'
        elif '√©' in text or '√®' in text or '√™' in text:
            return 'fr'
        elif '√§' in text or '√∂' in text or '√º' in text or '√ü' in text:
            return 'de'
        else:
            return 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except:
        return 'en'

async def auto_translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    
    text = update.message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫
    if ' /' in text and len(text.split(' /')) == 2:
        parts = text.split(' /')
        original_text, target_lang = parts[0].strip(), parts[1].strip().lower()
        
        if original_text and target_lang and target_lang in SUPPORTED_LANGUAGES:
            try:
                # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
                translation = GoogleTranslator(source='auto', target=target_lang).translate(original_text)
                
                source_emoji = 'üåê'  # –£–ø—Ä–æ—â–∞–µ–º –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
                target_emoji = LANGUAGE_EMOJIS.get(target_lang, 'üåê')
                
                response = f"""
{source_emoji} **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç**:
{original_text}

{target_emoji} **–ü–µ—Ä–µ–≤–æ–¥ ({SUPPORTED_LANGUAGES[target_lang]})**:
{translation}
                """
                await update.message.reply_text(response)
                return
            except Exception as e:
                logging.error(f"Translation error: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
                return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        source_lang = detect_language(text)
        
        chat_id = update.message.chat_id
        target_languages = DEFAULT_TARGET_LANGUAGES
        
        if ('chat_settings' in context.bot_data and 
            chat_id in context.bot_data['chat_settings']):
            target_languages = context.bot_data['chat_settings'][chat_id]['target_languages']
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        target_languages = [lang for lang in target_languages if lang != source_lang][:3]
        
        if not target_languages:
            target_languages = ['en', 'ru']
        
        source_emoji = LANGUAGE_EMOJIS.get(source_lang, 'üåê')
        response = f"{source_emoji} **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç**:\n{text}\n\n**–ü–µ—Ä–µ–≤–æ–¥—ã:**\n\n"
        
        for target_lang in target_languages:
            try:
                translation = GoogleTranslator(source='auto', target=target_lang).translate(text)
                target_emoji = LANGUAGE_EMOJIS.get(target_lang, 'üåê')
                response += f"{target_emoji} **{SUPPORTED_LANGUAGES[target_lang]}**:\n{translation}\n\n"
            except Exception as e:
                logging.error(f"Error translating to {target_lang}: {e}")
                continue
        
        if len(response) > 10:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
            await update.message.reply_text(response, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
        
    except Exception as e:
        logging.error(f"Auto-translate error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setlang", set_languages))
    application.add_handler(CommandHandler("lang", show_languages))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, auto_translate))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    application.run_polling()

if __name__ == '__main__':
    main()
